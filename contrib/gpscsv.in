#!@PYSHEBANG@
# @GENERATED@
# -*- coding: utf-8 -*-
# This file is Copyright 2010 by the GPSD project
# SPDX-License-Identifier: BSD-2-clause

# This code runs compatibly under Python 2 and 3.x for x >= 2.
# Preserve this property!
#
# Examples, do them in exact order:
#
#   Grab 100 samples of time,lat,lon,altHAE:
#       $ gpscsv -n 100 --cvt-isotime  > tpv.dat
<<<<<<< HEAD
#   Grab 100 samples of time,epx,epy,epv,eph
#       $ gpscsv -n 100 --cvt-isotime -f time,epx,epy,epv,eph > ep.dat
=======
#   Grab 100 samples of time,epx,epy,epv,eph,sep
#       $ gpscsv -n 100 --cvt-isotime -f time,epx,epy,epv,eph,sep > ep.dat
>>>>>>> 4e4be8215... contrib/gpscsv.in: Add ep[xyvh] example.
#   And grab 100 samples of time,xdop,ydop,vdop,tdop,hdop,gdop,pdop
#       $ gpscsv -n 100 --cvt-isotime -c SKY  > sky.dat
#
#   start gnuplot in interactive mode:
#       $ gnuplot
#
#   Some gnuplot housekeeping:
#       # this are csv files
#       gnuplot> set datafile separator ','
#       # use the first line as title
#       gnuplot> set key autotitle columnhead
#       # X axis is UNIT time in seconds.
#       gnuplot> set xdata time
#       gnuplot> set timefmt "%s"

#   Now to plot time vs latitude:
#       gnuplot> plot 'tpv.dat' using 1:2
#
#   Then to plot longitude and altHAE:
#       gnuplot> plot 'tpv.dat' using 1:3
#       gnuplot> plot 'tpv.dat' using 1:4
#
#   Put both latitude and longitude on one plot:
#       gnuplot> set y2tics
#       gnuplot> plot 'tpv.dat' using 1:2, '' using 1:3 axes x1y2
#
<<<<<<< HEAD
#   Plot epx, epy, epv and eph in one plot:
#       gnuplot> plot 'ep.dat' using 1:2, \
#                '' using 1:3, \
#                '' using 1:4, \
#                '' using 1:5
=======
#   Plot epx, epy, epv, eph, and sep in one plot:
#       gnuplot> plot 'ep.dat' using 1:2, '' using 1:3, \
#                '' using 1:4, '' using 1:5, '' using 1:6
>>>>>>> 4e4be8215... contrib/gpscsv.in: Add ep[xyvh] example.
#
#   Plot all the DOPs on one plot:
#       gnuplot> plot 'sky.dat' using 1:2, '' using 1:3, '' using 1:4, \
#                '' using 1:5, '' using 1:6, '' using 1:7, '' using 1:8
#
#   Lat/lon scatter plot:
#       # x is no longer time
#       gnuplot> set xdata
#       gnuplot> plot 'tpv.dat' using 3:2 title 'fix'
#

from __future__ import print_function

import argparse
import socket
import sys

# pylint wants local modules last
try:
    import gps
except ImportError as e:
    sys.stderr.write(
        "%s: can't load Python gps libraries -- check PYTHONPATH.\n" %
        (sys.argv[0]))
    sys.stderr.write("%s\n" % e)
    sys.exit(1)

gps_version = '@VERSION@'
if gps.__version__ != gps_version:
    sys.stderr.write("%s: ERROR: need gps module version %s, got %s\n" %
                     (sys.argv[0], gps_version, gps.__version__))
    sys.exit(1)

usage = '%(prog)s [OPTIONS] [host[:port[:device]]]'
epilog = ('BSD terms apply: see the file COPYING in the distribution root'
          ' for details.')

parser = argparse.ArgumentParser(usage=usage, epilog=epilog)
parser.add_argument(
    '-c',
    '--class',
    dest='mclass',         # class is a reserved word
    default='TPV',
    help='Message class to process. [Default %(default)s)]'
)
parser.add_argument(
    '--cvt-isotime',
    dest='cvtisotime',
    default=False,
    action="store_true",
    help='Convert ISO time to UNIX time'
)
parser.add_argument(
    '-D',
    '--debug',
    dest='debug',
    default=0,
    type=int,
    help='Set level of debug. Must be integer. [Default %(default)s)]'
)
parser.add_argument(
    '--device',
    dest='device',
    default='',
    help='The device to connect. [Default %(default)s)]'
)
parser.add_argument(
    '-f',
    '--fields',
    dest='fields',
    default=None,
    help='Fields to process. '' for all.  Default varies by class.'
)
parser.add_argument(
    '--host',
    dest='host',
    default='localhost',
    help='The host to connect. [Default %(default)s)]'
)
parser.add_argument(
    '-n',
    '--count',
    dest='count',
    default=0,
    type=int,
    help='Count of messages to parse. 0 to disable. [Default %(default)s)]'
)
parser.add_argument(
    '--header',
    dest='header',
    default=1,
    type=int,
    help='0: No header, 1: fields, 2: comment. [Default %(default)s)]'
)
parser.add_argument(
    '--port',
    dest='port',
    default=gps.GPSD_PORT,
    help='The port to connect. [Default %(default)s)]'
)
parser.add_argument(
    '-V', '--version',
    action='version',
    version="%(prog)s: Version " + gps_version + "\n",
    help='Output version to stderr, then exit'
)
parser.add_argument(
    'target',
    nargs='?',
    help='[host[:port[:device]]]'
)
options = parser.parse_args()

# the options host, port, device are set by the defaults
if options.target:
    # override host, port and device with target
    arg = options.target.split(':')
    len_arg = len(arg)
    if len_arg == 1:
        (options.host,) = arg
    elif len_arg == 2:
        (options.host, options.port) = arg
    elif len_arg == 3:
        (options.host, options.port, options.device) = arg
    else:
        parser.print_help()
        sys.exit(0)

# Fields to parse
if options.fields is None:
    default_fields = {'TPV': ('time', 'lat', 'lon', 'altHAE'),
                      'SKY': ('time', 'xdop', 'ydop', 'vdop', 'tdop',
                              'hdop', 'gdop', 'pdop'),
                      }
    # None specified, use defaults, if they exist
    if options.mclass in default_fields:
        json_fields = default_fields[options.mclass]
    else:
        # autodetect, read one message, use those fields
        json_fields = None
elif '' == options.fields:
    # autodetect, read one message, use those fields
    json_fields = None
else:
    json_fields = options.fields.split(',')

try:
    session = gps.gps(host=options.host, port=options.port,
                      verbose=options.debug)
except socket.error:
    sys.stderr.write("gegps: Could not connect to gpsd daemon\n")
    sys.exit(1)

session.stream(gps.WATCH_ENABLE | gps.WATCH_SCALED, devpath=options.device)

# top line is headings
if json_fields is not None and 0 < options.header:
    f = ','.join(json_fields)
    if 2 == options.header:
        f = '# ' + f
    print(f)
try:
    count = 0
    while True:
        report = session.next()
        if report['class'] != options.mclass:
            continue
        s = ''
        if json_fields is None:
            # no fields specified, use the 1st ones found
            fields = report.keys()
            json_fields = []
            for f in fields:
                if isinstance(report[f], (dict, list)):
                    # skip dictionay fields
                    continue

                json_fields.append(f)

            if 0 < options.header:
                f = ','.join(json_fields)
                if 2 == options.header:
                    f = '# ' + f
                print(f)

        for fld in json_fields:
            if options.cvtisotime and 'time' == fld:
                # convert 2020-08-17T23:58:01.000Z to 1597708682.0
                report[fld] = gps.isotime(report[fld])
            s += '%s,' % ('' if fld not in report else str(report[fld]))
        print(s)

        if 0 != options.count:
            count += 1
            if count >= options.count:
                break

except KeyboardInterrupt:
    # caught control-C
    print()
    sys.exit(1)
