#!@PYSHEBANG@
# @GENERATED@
# -*- coding: utf-8 -*-
# This file is Copyright 2010 by the GPSD project
# SPDX-License-Identifier: BSD-2-clause

# This code runs compatibly under Python 2 and 3.x for x >= 2.
# Preserve this property!
#
# Examples, do them in exact order:
#
#   Grab 100 samples of time,lat,lon,altHAE:
#       $ gpscsv -n 100 --cvt-isotime  > tpv.dat
#   Grab 100 samples of time,epx,epy,epv,eph,sep
#       $ gpscsv -n 100 --cvt-isotime -f time,epx,epy,epv,eph,sep > ep.dat
#   Grab 100 samples of time,xdop,ydop,vdop,tdop,hdop,gdop,pdop
#       $ gpscsv -n 100 --cvt-isotime -c SKY  > sky.dat
#   Grab 100 samples of time,nSat,uSat
#       $ gpscsv -n 100 --cvt-isotime -c SKY -f time,nSat,uSat  > sat.dat
#
#   start gnuplot in interactive mode:
#       $ gnuplot
#
#   Some gnuplot housekeeping:
#       # this are csv files
#       gnuplot> set datafile separator ','
#       # use the first line as title
#       gnuplot> set key autotitle columnhead
#       # X axis is UNIT time in seconds.
#       gnuplot> set xdata time
#       gnuplot> set timefmt "%s"

#   Now to plot time vs latitude:
#       gnuplot> plot 'tpv.dat' using 1:2
#
#   Then to plot longitude and altHAE:
#       gnuplot> plot 'tpv.dat' using 1:3
#       gnuplot> plot 'tpv.dat' using 1:4
#
#   Put both latitude and longitude on one plot:
#       gnuplot> set y2tics
#       gnuplot> plot 'tpv.dat' using 1:2, '' using 1:3 axes x1y2
#
#   Plot epx, epy, epv, eph, and sep in one plot:
#       gnuplot> plot 'ep.dat' using 1:2, '' using 1:3, \
#                '' using 1:4, '' using 1:5, '' using 1:6
#
#   Plot all the DOPs on one plot:
#       gnuplot> plot 'sky.dat' using 1:2, '' using 1:3, '' using 1:4, \
#                '' using 1:5, '' using 1:6, '' using 1:7, '' using 1:8
#
#   Plot nSat and uSat together:
#       gnuplot> plot 'sat.dat' using 1:2, '' using 1:3
#
#   Lat/lon scatter plot:
#       # x is no longer time
#       gnuplot> set xdata
#       gnuplot> plot 'tpv.dat' using 3:2 title 'fix'
#

from __future__ import print_function

import argparse
import socket
import sys
import time            # for time.time()


def _do_one_line(data):
    '''dump one report line'''

    global options

    if options.json_fields is None:
        # no fields specified, use the 1st ones found
        fields = data.keys()
        options.json_fields = []
        for f in fields:
            if isinstance(data[f], (dict, list)):
                # skip dictionay fields
                continue

            options.json_fields.append(f)

        if 0 < options.header:
            f = options.separator.join(options.json_fields)
            if 2 == options.header:
                f = '# ' + f
            print(f)

    out = []
    for fld in options.json_fields:
        if 'time' == fld and options.cvtisotime:
            # convert 2020-08-17T23:58:01.000Z to 1597708682.0
            data[fld] = gps.isotime(data[fld])
        out.append('' if fld not in data else str(data[fld]))
    print(options.separator.join(out))


# pylint wants local modules last
try:
    import gps
except ImportError as e:
    sys.stderr.write(
        "%s: can't load Python gps libraries -- check PYTHONPATH.\n" %
        (sys.argv[0]))
    sys.stderr.write("%s\n" % e)
    sys.exit(1)

gps_version = '@VERSION@'
if gps.__version__ != gps_version:
    sys.stderr.write("%s: ERROR: need gps module version %s, got %s\n" %
                     (sys.argv[0], gps_version, gps.__version__))
    sys.exit(1)

description = 'Convert one gpsd JSON message class to csv format.'
usage = '%(prog)s [OPTIONS] [host[:port[:device]]]'
epilog = ('Use the psuedo class SAT to dump the individual satellite '
          'records\nfrom the SKY messages.\n\n'
          'Use the psuedo class SUBFRAME1 to dump Subframe 1 from the '
          'the SUBFRAME messages.\n\n'
          'Use the psuedo class SUBFRAME2 to dump Subframe 2 from the '
          'the SUBFRAME messages.\n\n'
          'Use the psuedo class SUBFRAME3 to dump Subframe 3 from the '
          'the SUBFRAME messages.\n\n'
          'BSD terms apply: see the file COPYING in the distribution root'
          ' for details.')

parser = argparse.ArgumentParser(
             description=description,
             epilog=epilog,
             formatter_class=argparse.RawDescriptionHelpFormatter,
             usage=usage)
parser.add_argument(
    '-c',
    '--class',
    dest='mclass',         # class is a reserved word
    default='TPV',
    help='Message class to process. [Default %(default)s)]'
)
parser.add_argument(
    '--cvt-isotime',
    dest='cvtisotime',
    default=False,
    action="store_true",
    help='Convert ISO time to UNIX time'
)
parser.add_argument(
    '-D',
    '--debug',
    dest='debug',
    default=0,
    type=int,
    help='Set level of debug. Must be integer. [Default %(default)s)]'
)
parser.add_argument(
    '--device',
    dest='device',
    default='',
    help='The device to connect. [Default %(default)s)]'
)
parser.add_argument(
    '-f',
    '--fields',
    dest='fields',
    default=None,
    help='Fields to process. '' for all.  Default varies by class.'
)
parser.add_argument(
    '--host',
    dest='host',
    default='localhost',
    help='The host to connect. [Default %(default)s)]'
)
parser.add_argument(
    '-n',
    '--count',
    dest='count',
    default=0,
    type=int,
    help='Count of messages to parse. 0 to disable. [Default %(default)s)]'
)
parser.add_argument(
    '--header',
    dest='header',
    default=1,
    type=int,
    help='0: No header, 1: fields, 2: comment. [Default %(default)s)]'
)
parser.add_argument(
    '--separator',
    dest='separator',
    default=',',
    type=str,
    help='CSV field separator character. [Default %(default)s)]'
)
parser.add_argument(
    '--port',
    dest='port',
    default=gps.GPSD_PORT,
    help='The port to connect. [Default %(default)s)]'
)
parser.add_argument(
    '-V', '--version',
    action='version',
    version="%(prog)s: Version " + gps_version + "\n",
    help='Output version to stderr, then exit'
)
parser.add_argument(
    '-x',
    '--seconds',
    dest='seconds',
    default=0,
    type=int,
    help='Seconds of messages to parse. 0 to disable. [Default %(default)s)]'
)
parser.add_argument(
    'target',
    nargs='?',
    help='[host[:port[:device]]]'
)
options = parser.parse_args()

# the options host, port, device are set by the defaults
if options.target:
    # override host, port and device with target
    arg = options.target.split(':')
    len_arg = len(arg)
    if len_arg == 1:
        (options.host,) = arg
    elif len_arg == 2:
        (options.host, options.port) = arg
    elif len_arg == 3:
        (options.host, options.port, options.device) = arg
    else:
        parser.print_help()
        sys.exit(0)

# Fields to parse
options.json_fields = None
if options.fields is None:
    default_fields = {'SAT': ('time', 'gnssid', 'svid', 'PRN', 'az', 'el',
                              'ss', 'used', 'health'),
                      'SKY': ('time', 'xdop', 'ydop', 'vdop', 'tdop',
                              'hdop', 'gdop', 'pdop'),
                      'SUBFRAME1': ('TOW17', 'tSV', 'IODC', 'WN', 'ura',
                                    'hlth', 'L2', 'L2P', 'Tgd',
                                    'toc', 'af0', 'af1', 'af2'),
                      'SUBFRAME2': ('TOW17', 'tSV', 'IODE', 'M0',
                                    'deltan', 'e', 'sqrtA', 'FIT', 'AODO',
                                    'Crs', 'Cuc', 'Cus', 'toe'),
                      'SUBFRAME3': ('TOW17', 'tSV', 'IODE',
                                    'Crc', 'Cic', 'Cis', 'Omega0', 'i0',
                                    'omega', 'Omegad', 'IDOT'),
                      'TPV': ('time', 'lat', 'lon', 'altHAE'),
                      }
    # None specified, use defaults, if they exist
    if options.mclass in default_fields:
        options.json_fields = default_fields[options.mclass]
    else:
        # autodetect, read one message, use those fields
        options.json_fields = None
elif '' == options.fields:
    # autodetect, read one message, use those fields
    options.json_fields = None
else:
    options.json_fields = options.fields.split(',')

options.frame = None
if 'SAT' == options.mclass:
    options.mclass = 'SKY'
    options.subclass = 'SAT'
elif 'SUBFRAME1' == options.mclass:
    options.mclass = 'SUBFRAME'
    options.subclass = 'EPHEM1'
    options.frame = 1
elif 'SUBFRAME2' == options.mclass:
    options.mclass = 'SUBFRAME'
    options.subclass = 'EPHEM2'
    options.frame = 2
elif 'SUBFRAME3' == options.mclass:
    options.mclass = 'SUBFRAME'
    options.subclass = 'EPHEM3'
    options.frame = 3
else:
    options.subclass = None

try:
    session = gps.gps(host=options.host, port=options.port,
                      verbose=options.debug)
except socket.error:
    sys.stderr.write("gegps: Could not connect to gpsd daemon\n")
    sys.exit(1)

session.stream(gps.WATCH_ENABLE | gps.WATCH_SCALED, devpath=options.device)


# top line is headings
if options.json_fields is not None and 0 < options.header:
    f = options.separator.join(options.json_fields)
    if 2 == options.header:
        f = '# ' + f
    print(f)

count = 0
if 0 < options.seconds:
    end_seconds = time.time() + options.seconds
else:
    end_seconds = 0

try:
    while True:
        report = session.next()
        if report['class'] != options.mclass:
            continue
        if 'SAT' == options.subclass:
            # grab the sats, one at a time
            for sat in report['satellites']:
                subreport = {'time': report['time']}
                subreport.update(sat)
                _do_one_line(subreport)
        elif 'SUBFRAME' == options.mclass:
            if report['frame'] != options.frame:
                continue

            subreport = {'TOW17': report['TOW17'], 'tSV': report['tSV']}
            subreport.update(report[options.subclass])
            _do_one_line(subreport)

        else:
            _do_one_line(report)

        if 0 < options.count:
            count += 1
            if count >= options.count:
                break

        if 0 < options.seconds:
            if time.time() > end_seconds:
                break

except KeyboardInterrupt:
    # caught control-C
    print()
    sys.exit(1)
